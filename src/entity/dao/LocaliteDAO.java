package entity.dao;

import entity.Localite;
import entity.Localite;
import entity.base.BaseLocalite;
import entity.base.BaseLocalite;

import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

import com.util.HibernateUtil;

import entity.base.BaseLocaliteDAO;

/**
 * This class has been automatically generated by Hibernate Synchronizer.
 * For more information or documentation, visit The Hibernate Synchronizer page
 * at http://www.binamics.com/hibernatesync or contact Joe Hudson at joe@binamics.com.
 *
 * This is the object class that relates to the localite table.
 * Any customizations belong here.
 */
public class LocaliteDAO extends BaseLocaliteDAO {
	
	private SessionFactory sessionFactory = HibernateUtil.getSessionFactory();
	
public List<Localite> findAll(){
	
		
		try {
			if(!this.sessionFactory.getCurrentSession().getTransaction().isActive()){
				Transaction transaction = this.sessionFactory.getCurrentSession().getTransaction();
				Transaction tx =this.sessionFactory.getCurrentSession().beginTransaction();
				}
				Criteria crit = this.sessionFactory.getCurrentSession().createCriteria(BaseLocalite.class);
//				this.sessionFactory.getCurrentSession().close();
				return crit.list();
				
	
		}catch (Exception e){
			try {
				throw e;
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
				return null;
			}
//			return null;
		}
			
	
	}

public Localite findByID(int idLocalite){
	
	try {
		if(!this.sessionFactory.getCurrentSession().getTransaction().isActive()){
			Transaction transaction = this.sessionFactory.getCurrentSession().getTransaction();
			Transaction tx =this.sessionFactory.getCurrentSession().beginTransaction();}
		
			Localite localite = (Localite) this.sessionFactory.getCurrentSession().createCriteria(BaseLocalite.class).add(Restrictions.eq(Localite.PROP_ID, idLocalite)).uniqueResult();
//					this.sessionFactory.getCurrentSession().close();
			return  localite;
	}catch (Exception e){
		System.out.println(e);
		return null;
	}
		
}

public Localite findByCode(String codeLocalite){
	
	try {
		if(!this.sessionFactory.getCurrentSession().getTransaction().isActive()){
			Transaction transaction = this.sessionFactory.getCurrentSession().getTransaction();
			Transaction tx =this.sessionFactory.getCurrentSession().beginTransaction();}
		
			Localite localite = (Localite) this.sessionFactory.getCurrentSession().createCriteria(BaseLocalite.class).add(Restrictions.eq(Localite.PROP_CODE, codeLocalite)).uniqueResult();
//					this.sessionFactory.getCurrentSession().close();
			return  localite;
	}catch (Exception e){
		System.out.println(e);
		return null;
	}
		

}



public void insertLocalite(Localite localite,boolean uniqueInsert) throws Exception{
	try {
		
//		sessionFactory = HibernateUtil.getSessionFactory();
		
//		localite.setId(-1);
		if(!this.sessionFactory.getCurrentSession().getTransaction().isActive()){
			this.sessionFactory.getCurrentSession().getTransaction().begin();}
		this.sessionFactory.getCurrentSession().save((BaseLocalite) localite);
		if(uniqueInsert)
		this.sessionFactory.getCurrentSession().getTransaction().commit();
//		this.sessionFactory.getCurrentSession().persist(localite);
//		this.sessionFactory.getCurrentSession().flush();
//		this.sessionFactory.getCurrentSession().close();
	}catch (Exception e){
		this.sessionFactory.getCurrentSession().getTransaction().rollback();
//		throw e;
	}
}
public void insertListLocalite(List<Localite> listLocalite) throws Exception{
	    for(int i = 0; i < listLocalite.size(); i++){
	    	
	    	this.insertLocalite(listLocalite.get(i),false);
	  }
	    this.sessionFactory.getCurrentSession().getTransaction().commit();
}

}